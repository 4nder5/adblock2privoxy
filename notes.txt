Check:
lookahead in privoxy (works)
taggers order in privoxy 








Features:
record = match|elem|comment  elem: ^(.*)(#@?#)(.+)$ comment:^!
match = positive|negative url flags


match url => [host | host_path | path ]{1-}
host = contains only host chars within surrounding
host_path = starts with host chars. host chars end with host separator. Everything within surrounding
path = NOT starts with | or *
INVALID = anything else
trimming = trimming leading "\w*://", "^", "|"* and trailing "/", "^"
host chars = [a-zA-Z0-9.-*:]
host separator = "^", "/", "*". All "*" before first non-host character are host separators and give different host_path (even from just host)
host_path separation: Host end = last host character. Path start = first non-host character. 
"^", "/" on the border belong to host. "*" separator belong to both.


---------------------------------------------------------------
---------------------------------------------------------------
example chain: 

{+client-header-tagger{ab2p-block-Aij-Cij-Xx-when-R53nh}}
test.com

-----

CLIENT-HEADER-TAGGER: ab2p-block-Aij-Cij-Xx-when-R53nh
s@^Referrer(?!:.*\/$host)(?=:.*(\.|\/)(foo.com|baz.me)):.*@ab2p-block-Aij-Cij-Xx@Di

----------------------------------------------------------

{+client-header-tagger{ab2p-block-Aij} \
 +server-header-tagger{ab2p-block-Cij} \
 +client-header-tagger{ab2p-block-Xx}}          
TAG:^ab2p-block-Aij-Cij-Xx$
opa.na.ru
...

-----

CLIENT-HEADER-TAGGER: ab2p-block-Xx
s@^X-Requested-With(?=:\s*XMLHttpRequest):.*@ab2p-block@Ti

---

CLIENT-HEADER-TAGGER: ab2p-block-Aij
s@^accept(?=:.*(image|javascript)):.*@ab2p-block@Ti

---

SERVER-HEADER-TAGGER: ab2p-block-Cij
s@^content-type(?=:.*(image|javascript)):.*@ab2p-block@Ti

-------------------------------------------------------------

{+block \
 +server-header-tagger{ab2p-block-s}}
 TAG:^ab2p-block$
example.com

--

SERVER-HEADER-TAGGER: ab2p-block-s
s@.*@ab2p-block-s@i

--

{+block}
TAG:^ab2p-block-s$

--- последние 2 не забыть добавить ручками
------------------------------------------------------------
-------------------------------------------------------------
example chain 2: 

{-block
 +client-header-tagger{ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-Rnt} /
 +client-header-tagger{ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-nR}}
test.com

-------

CLIENT-HEADER-TAGGER: ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-Rnt
s@^Referrer(?=:.*\/$host):.*@ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx@TDi
s@^Referrer.*@-ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-nR@i

--

CLIENT-HEADER-TAGGER: ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-nR
s@.*@ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx@Ti

--

#auxiliarly action, only 1 specific tag should be here
{-client-header-tagger{ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-nR}}
TAG:^-ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx-when-nR$

-------------------------------------------------------

{-block
 +client-header-tagger{ab2p-unblock-nA}   /
 +client-header-tagger{ab2p-unblock-Anij} /
 +client-header-tagger{ab2p-unblock-nC}   /
 +client-header-tagger{ab2p-unblock-Cnij} /
 +client-header-tagger{ab2p-unblock-nX}   /
 +client-header-tagger{ab2p-unblock-Xnx}  }
TAG:^ab2p-unblock-nA-Anij-nC-Cnij-nX-Xnx$
bla.op
nhh.kl
...

--

CLIENT-HEADER-TAGGER: ab2p-unblock-nX
s@.*@ab2p-unblock@

--

CLIENT-HEADER-TAGGER: ab2p-unblock-Xnx
s@^X-Requested-With(?!:\s*XMLHttpRequest):.*@ab2p-unblock@Ti
s@^X-Requested-With:.*@-ab2p-unblock-nX@Ti

--

#auxiliarly action, only 1 specific tag should be here
{-client-header-tagger{ab2p-unblock-nX}}
TAG:^-ab2p-unblock-nX$

-------

CLIENT-HEADER-TAGGER: ab2p-unblock-nA
s@.*@ab2p-unblock@Ti

--

CLIENT-HEADER-TAGGER: ab2p-unblock-Anij
s@^accept(?!:.*(\/javascript|image\/)):.*@ab2p-unblock@
s@^accept:.*@-ab2p-unblock-nA@Ti

--

#auxiliarly action, only 1 specific tag should be here
{-client-header-tagger{ab2p-unblock-nA}}
TAG:^-ab2p-unblock-nA$

----


SERVER-HEADER-TAGGER: ab2p-unblock-nC
s@.*@ab2p-unblock@Ti

--

SERVER-HEADER-TAGGER: ab2p-unblock-Cnij
s@^content-type(?!:.*(\/javascript|image\/)):.*@ab2p-unblock@Ti
s@^content-type:.*@-ab2p-unblock-nC@Ti

--

#auxiliarly action, only 1 specific tag should be here
{-client-header-tagger{ab2p-unblock-nC}}
TAG:^-ab2p-unblock-nC$

--------------------------------------------------------------

{-block /
 -server-header-tagger{ab2p-block-s} \
 +server-header-tagger{ab2p-unblock-d} \
 +server-header-tagger{ab2p-unblock-s} \
 +client-header-tagger{ab2b-unblock-u}} 
TAG:^ab2p-unblock$ 
example.com


CLIENT-HEADER-TAGGER: ab2b-unblock-u
s@user-agent.*@ab2p-unblock-u@Ti

SERVER-HEADER-TAGGER: ab2p-unblock-d
s@Date.*@ab2p-unblock-d@Ti

SERVER-HEADER-TAGGER: ab2p-unblock-s
s@Server.*@ab2p-unblock-s@Ti


--

{-block}
TAG:^ab2p-unblock-u$

{-block}
TAG:^ab2p-unblock-d$

{-block}
TAG:^ab2p-unblock-s$

------------------------------------------------------------------
-------------------------------------------------------------------

SERVER-HEADER-FILTER: ab2p-block-subdocument
s@^Server:.*@X-Frame-Options: DENY@Ti

SERVER-HEADER-FILTER: ab2p-block-subdocument-thirdparty
s@^Server:.*@X-Frame-Options: SAMEORIGIN@Ti

FILTER: ab2p-element-hide
s@(<HEAD[^>]*>)@\1<link rel="stylesheet" type="text/css" href="http://privoxy.zubr.me/$host"></link>@Di

-------------------------------------------------------------------
-------------------------------------------------------------------


filter\tagger\tag names:  ab2p-(un?)block-_?[jisvafoh]*(-_?xr)?
n = NOT

C = content-type
j = */(x-)?javascript
i = image/*
c = */css 
v = video/*
a = audio/*
s = */(x-)?shockwave-flash
o = */octet-stream
h = */html


X = X-Requested-With
R... = Referrer (domain and maybe thirdparty)
t = thirdparty



host replacement: 
+ preparation: remove leading and trailing "^", "|", "/", "\w*://" 
+ replace leading "*" with .*; trailing * with *. 
+ no leading | or ^ or * => add leading .*
+ no trailing | or ^ or / or * => add trailing *.
+ add trailing /
+ leading || => duplicate host with leading www.

path replacement in host_path, path:
^ => [^\w%.-]
* => .*
trailing | => $
?,$,.,+,[,],/ => escape

path replacement in just path:
add leading /.*


protocol = 

https://

protocolChar = [a-zA-Z*]
protocolEnd =  ://, :^, :*/, :*, *


postfilter:
query can be regex if host is empty +
copy trailing * from host to query +
query cannot be filled if proto is filled while host is empty +
host cannot be just "*" (because it duplicates another case) +
host should contain dot if there are no open spaces and * in it


Special:
match-case = /(?-i)PaTtErN
a,b = a OR b
~a,b = NOTa !OR! b
~a,~b = NOT(a OR b)
domain=a,b,~c,~d = (a OR B) !AND! NOT (b OR c)

Special blacklist:
script = accept/content-type = */javascript
~script = accept/content-type filled and != */javascript or xmlhttprequest
image = accept/content-type = image/*
~image = accept/content-type filled and != image/* or xmlhttprequest
stylesheet = accept/content-type = */css
~stylesheet = accept/content-type filled and != */css or xmlhttprequest
object = accept/content-type = video/*, audio/*, */shockwave-flash
~object = accept/content-type filled and != video/*, audio/*, */shockwave-flash or xmlhttprequest
object-subrequest= accept/content-type = video/*, */octet-stream, audio/*
~object-subrequest= accept/content-type filled and != video/*, */octet-stream, audio/* or xmlhttprequest
xmlhttprequest=X-Requested-With
~xmlhttprequest=no X-Requested-With

third-party = Referer filled and != host
~third-party = Referer = host
domain=<domain> = Referer = <domain>
domain=~<domain> = Referer is filled and != <domain>

subdocument = seth header X-Frame-Options DENY; 
subdocument,third-party = seth header X-Frame-Options DENY; 
~subdocument = (accept/content-type filled and != */html) or xmlhttprequest

popup = mark urls in window.open??


Special whitelist:
script = accept/content-type empty or = */javascript
~script = accept/content-type empty or != */javascript or xmlhttprequest
image = accept/content-type empty or = image/*
~image = accept/content-type empty or != image/* or xmlhttprequest
stylesheet = accept/content-type empty or = */css
~stylesheet = accept/content-type empty or != */css or xmlhttprequest
object = accept/content-type empty or = video/*, audio/*, */shockwave-flash
~object = accept/content-type empty or != video/*, audio/*, */shockwave-flash or xmlhttprequest
object-subrequest= accept/content-type empty or = video/*, */octet-stream, audio/*
~object-subrequest= accept/content-type empty or != video/*, */octet-stream, audio/* or xmlhttprequest
xmlhttprequest=X-Requested-With
~xmlhttprequest=no X-Requested-With


third-party = Referer filled and != host
~third-party = Referer empty or = host
domain=<domain> = Referer = <domain>
domain=~<domain> = Referer is empty or != <domain>


subdocument = don't set header X-Frame-Options DENY;
~subdocument = accept/content-type empty or != */html OR ~third-party or xmlhttprequest !!! SPECIAL CASE 2

elemhide = disable ab2p-element-hide
~elemhide = undefined

document = ???
popup = ???

Classification:

header client tagging
 - accept 
 - X-Requested-With
 - Referer
 - Host

header server tagging
 - content-type (m)
 - content-type (n)

header tagging is necessary for any option (including domain) except for "match-case and donottrack"

CSS should be grouped by selectors







, then by domains. Block/unblock should be calculated for each group. 





To test:
||babylon.com^*?affid=
